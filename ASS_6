
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def insertSorted(head: Node, data: int) -> Node:
    new_node = Node(data)
    if not head:
        new_node.next = new_node
        return new_node

    curr = head
    while True:
        if curr.data <= data <= curr.next.data:
            break
        if curr.data > curr.next.data:
            if data >= curr.data or data <= curr.next.data:
                break

        curr = curr.next
        if curr == head:
            break

    new_node.next = curr.next
    curr.next = new_node

    # Update head if new_node is the smallest
    if data < head.data:
        head = new_node

    return head

def printCircular(head: Node):
    if not head:
        print("List is empty")
        return
    res = []
    curr = head
    while True:
        res.append(str(curr.data))
        curr = curr.next
        if curr == head:
            break
    print("->".join(res))

if __name__ == "__main__":
    # Example 1: 1->2->4
    head = Node(1)
    second = Node(2)
    third = Node(4)
    head.next = second
    second.next = third
    third.next = head

    print("Original list:")
    printCircular(head)
    head = insertSorted(head, 2)
    print("\nAfter inserting 2:")
    printCircular(head)
    head = Node(1)
    n2 = Node(4)
    n3 = Node(7)
    n4 = Node(9)
    head.next = n2
    n2.next = n3
    n3.next = n4
    n4.next = head
    print("\nOriginal list:")
    printCircular(head)
    head = insertSorted(head, 5)
    print("\nAfter inserting 5:")
    printCircular(head)
