
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


def pairwiseSwap(head: Node) -> Node:
    # If list is empty or has only one node
    if not head or not head.next:
        return head
    new_head = head.next
    prev = None
    curr = head
    while curr and curr.next:
        first = curr
        second = curr.next
        nxt = second.next  # save the next pair start

     
        second.next = first
        first.next = nxt

        if prev:
            prev.next = second
        prev = first
        curr = nxt

    return new_head
def printList(head: Node):
    res = []
    curr = head
    while curr:
        res.append(str(curr.data))
        curr = curr.next
    print("->".join(res))
if __name__ == "__main__":
    # Example 1: 1->2->2->4->5->6->7->8
    nodes = [Node(x) for x in [1,2,2,4,5,6,7,8]]
    for i in range(len(nodes)-1):
        nodes[i].next = nodes[i+1]
    head = nodes[0]
    print("Original list:")
    printList(head)
    head = pairwiseSwap(head)
    print("\nAfter pairwise swap:")
    printList(head)
    nodes = [Node(x) for x in [1,3,4,7,9,10,1]]
    for i in range(len(nodes)-1):
        nodes[i].next = nodes[i+1]
    head = nodes[0]

    print("\nOriginal list:")
    printList(head)

    head = pairwiseSwap(head)
    print("\nAfter pairwise swap:")
    printList(head)
